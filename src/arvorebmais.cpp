/*
 * ==========================================================
 * Programa em C++ para Implementar uma √Årvore B+ (B+ Tree)
 * ==========================================================
 */

// Bibliotecas padr√£o necess√°rias
#include <algorithm> // Para fun√ß√µes como std::lower_bound (√∫til na busca)
#include <iostream>  // Para std::cout (impress√£o na tela)
#include <vector>    // Para std::vector (nossas listas din√¢micas)

/*
 * [Sua Nota] Atalho para o namespace padr√£o.
 * Sem esta linha, ter√≠amos que escrever std::vector, std::cout, etc.
 *
 * [Nota de Clean Code] Isso √© √≥timo para arquivos .cpp, mas evite
 * usar "using namespace" em arquivos de cabe√ßalho (.h)
 * para n√£o "poluir" o c√≥digo de quem incluir seu arquivo.
 */
using namespace std;

/**
 * @brief Define uma classe gen√©rica de √Årvore B+.
 *
 * [Sua Nota] 'template <typename T>' define T como um tipo gen√©rico.
 * √â parecido com a ideia do 'void*' em C, mas muito mais seguro,
 * pois o C++ verifica os tipos em tempo de compila√ß√£o.
 *
 * @tparam T O tipo de dado que as chaves (keys) ir√£o armazenar (int, string, etc.)
 */
template <typename T>
class BPlusTree {
// 'public:' significa que tudo abaixo pode ser acessado de fora da classe
public:
    /**
     * @brief [Sua Nota] Estrutura interna que define um N√≥ da √°rvore.
     */
    struct Node {
        // [Sua Nota] Valor booleano que indica se o n√≥ √© uma folha
        bool isLeaf;
        // [Sua Nota] Vetor de chaves, usando o tipo gen√©rico T
        vector<T> keys;
        // [Sua Nota] Vetor de ponteiros para os n√≥s filhos
        vector<Node*> children;
        // [Sua Nota] Ponteiro para o pr√≥ximo n√≥ folha (para rangeQuery)
        Node* next;

        /**
         * @brief Construtor do N√≥.
         * [Sua Nota] Garante que o n√≥ seja inicializado corretamente
         * para evitar "lixo de mem√≥ria".
         *
         * @param leaf Define se o n√≥ deve ser criado como folha (padr√£o: false).
         */
        Node(bool leaf = false)
            // [Sua Nota] 'isLeaf(leaf)' inicializa o membro 'isLeaf' com o par√¢metro 'leaf'.
            : isLeaf(leaf),
            // [Sua Nota] 'next(nullptr)' inicializa o ponteiro 'next' como nulo.
              next(nullptr)
        {
            // O corpo do construtor est√° vazio, pois tudo foi feito
            // na lista de inicializa√ß√£o (acima).
        }
    };

    /*
     * ==========================================
     * Membros (Vari√°veis) da Classe BPlusTree
     * ==========================================
     */

    // [Sua Nota] 'root' √© o ponteiro para o n√≥ raiz, o in√≠cio da √°rvore.
    Node* root;
    
    /*
     * [Sua Nota] 't' √© o grau m√≠nimo da √°rvore.
     * Ele define as regras de "lota√ß√£o" do n√≥:
     * - M√≠nimo de chaves: t - 1
     * - M√°ximo de chaves: 2*t - 1
     * - M√≠nimo de filhos: t
     * - M√°ximo de filhos: 2*t
     */
    int t;

    /*
     * ==========================================
     * Fun√ß√µes "Helper" (Auxiliares Internas)
     * ==========================================
     * Estas s√£o as fun√ß√µes que fazem o trabalho pesado.
     * Elas s√£o chamadas pelas fun√ß√µes p√∫blicas (insert, remove, etc.)
     */

    // Fun√ß√£o para dividir um n√≥ filho que est√° cheio
    void splitChild(Node* parent, int index, Node* child);

    // Fun√ß√£o para inserir uma chave em um n√≥ que *n√£o* est√° cheio
    void insertNonFull(Node* node, T key);

    // Fun√ß√£o recursiva para remover uma chave
    void remove(Node* node, T key);

    // Fun√ß√µes de balanceamento (usadas na remo√ß√£o)
    void borrowFromPrev(Node* node, int index);
    void borrowFromNext(Node* node, int index);
    void merge(Node* node, int index);

    // Fun√ß√£o recursiva para imprimir a √°rvore
    void printTree(Node* node, int level);

/*
 * ==========================================
 * Interface P√∫blica
 * ==========================================
 * [Sua Nota] Estas s√£o as fun√ß√µes que o usu√°rio final vai chamar.
 * Elas escondem a complexidade das fun√ß√µes auxiliares.
 */
public:
    /**
     * @brief Construtor da √Årvore B+.
     * [Sua Nota] Recebe o grau m√≠nimo como par√¢metro obrigat√≥rio.
     *
     * @param degree O grau m√≠nimo (t) da √°rvore.
     */
    BPlusTree(int degree)
        // [Sua Nota] Inicializa a raiz ('root') como nula, pois a √°rvore come√ßa vazia.
        : root(nullptr),
        // [Sua Nota] Armazena o 'degree' na vari√°vel interna 't'.
          t(degree)
    {
    }

    // Fun√ß√µes p√∫blicas principais
    void insert(T key);
    bool search(T key);
    void remove(T key);
    vector<T> rangeQuery(T lower, T upper);
    void printTree();

}; // <-- [Corre√ß√£o] Fim da defini√ß√£o da classe BPlusTree

/*
 * ==========================================================
 * Implementa√ß√£o das Fun√ß√µes
 * ==========================================================
 */

/**
 * @brief Divide um n√≥ 'child' lotado.
 * [Sua Nota] 'parent' √© o n√≥ pai, 'index' √© a posi√ß√£o do 'child'
 * no vetor de filhos do pai, e 'child' √© o n√≥ lotado.
 */
template <typename T>
void BPlusTree<T>::splitChild(Node* parent, int index,
                              Node* child)
{
    // [Sua Nota] Cria um novo n√≥ "irm√£o", com o mesmo status (folha ou n√£o)
    // do n√≥ que ser√° dividido.
    Node* newChild = new Node(child->isLeaf);

    // [Sua Nota] Insere o 'newChild' no vetor de filhos do 'parent',
    // na posi√ß√£o 'index + 1' (logo ao lado do 'child' original).
    parent->children.insert(
        parent->children.begin() + index + 1, newChild);

    // [Sua Nota] "Promove" a chave do meio (t-1) do 'child' lotado
    // para o 'parent', na posi√ß√£o 'index'.
    parent->keys.insert(parent->keys.begin() + index,
                        child->keys[t - 1]);

    // [Sua Nota] Copia a "metade direita" das chaves do 'child'
    // original para o 'newChild'.
    newChild->keys.assign(child->keys.begin() + t,
                          child->keys.end());

    // [Sua Nota] Reduz o tamanho do 'child' original para que ele
    // contenha apenas a "metade esquerda" das chaves.
    child->keys.resize(t - 1);

    // [Sua Nota] Se o 'child' N√ÉO for uma folha (for um n√≥ interno),
    // temos que dividir tamb√©m o vetor de 'children' dele.
    if (!child->isLeaf) {
        // [Sua Nota] O 'newChild' fica com a "metade direita" dos filhos.
        newChild->children.assign(child->children.begin() + t,
                                  child->children.end());
        // [Sua Nota] O 'child' original fica com a "metade esquerda" dos filhos.
        child->children.resize(t);
    }

    // Se o 'child' FOR uma folha, precisamos atualizar a "lista ligada"
    // de folhas (a corrente üîó que falamos).
    if (child->isLeaf) {
        // O 'newChild' aponta para quem o 'child' apontava antes.
        newChild->next = child->next;
        // O 'child' agora aponta para o 'newChild'.
        // Ordem: child -> newChild -> (o que era o next do child)
        child->next = newChild;
    }
}

/**
 * @brief Insere uma chave em um n√≥ que *tem certeza* que n√£o est√° cheio.
 * [Sua Nota] Esta √© a fun√ß√£o "trabalhadora" recursiva. A 'insert' p√∫blica
 * chama esta, e esta fun√ß√£o "desce" pela √°rvore at√© encontrar o local certo.
 *
 * @param node O n√≥ atual que estamos inspecionando (come√ßa com a raiz).
 * @param key A chave (do tipo gen√©rico T) que queremos inserir.
 */
template <typename T>
void BPlusTree<T>::insertNonFull(Node* node, T key)
{
    // ==========================================================
    // CASO BASE (Recurs√£o para aqui)
    // ==========================================================
    // [Sua Nota] Se o n√≥ atual √© uma folha, este √© o fim da linha.
    // √â aqui que a chave deve ser realmente inserida.
    if (node->isLeaf) {
        
        // [Sua Nota] Encontra a posi√ß√£o correta para inserir a chave
        // mantendo o vetor 'keys' ordenado.
        //
        // std::upper_bound: Encontra o primeiro elemento que √©
        // *maior* que 'key'. Inserir a 'key' *antes* dele
        // mant√©m a ordem perfeitamente.
        node->keys.insert(
            upper_bound(node->keys.begin(), node->keys.end(), key),
            key
        );
    }
    // ==========================================================
    // CASO RECURSIVO (N√≥ interno)
    // ==========================================================
    // [Sua Nota] Se n√£o √© uma folha, √© um n√≥ interno (um "guia").
    // Precisamos decidir para qual "porta" (filho) devemos descer.
    else {
        // [Sua Nota] Procura o √≠ndice do filho correto, come√ßando
        // da direita para a esquerda.
        int i = node->keys.size() - 1;
        while (i >= 0 && key < node->keys[i]) {
            i--;
        }
        
        // [Sua Nota] O loop parou na chave *antes* do caminho que
        // queremos. O caminho correto √© 'i + 1'.
        i++; 

        // ==========================================================
        // A "M√ÅGICA" DA B+ TREE: Dividir antes de descer
        // ==========================================================
        // [Sua Nota] Verificamos se a "gaveta" (filho) para onde
        // vamos descer est√° LOTADA. (2*t - 1 √© o n¬∞ m√°ximo de chaves).
        if (node->children[i]->keys.size() == 2 * t - 1) {
            
            // [Sua Nota] Se estiver lotada, chamamos 'splitChild'
            // para dividi-la AGORA, *antes* de descermos.
            splitChild(node, i, node->children[i]);

            // [Sua Nota] Ap√≥s a divis√£o, uma chave do filho subiu
            // para este n√≥ ('node') na posi√ß√£o 'i'.
            // Precisamos checar se a 'key' que queremos inserir
            // √© maior que essa chave que acabou de subir.
            // Se for, o caminho certo agora √© o *novo* irm√£o (i + 1).
            if (key > node->keys[i]) {
                i++;
            }
        }
        
        // [Sua Nota] Agora temos CERTEZA que o filho 'children[i]'
        // tem espa√ßo. Chamamos a mesma fun√ß√£o de novo, mas
        // um n√≠vel abaixo (no filho que escolhemos).
        insertNonFull(node->children[i], key);
    }
}

/**
 * @brief Fun√ß√£o de balanceamento (usada na remo√ß√£o).
 * [Sua Nota] Pega uma chave "emprestada" do IRM√ÉO ANTERIOR (da esquerda).
 * Isso √© uma "rota√ß√£o de chaves".
 *
 * Cen√°rio: 'node->children[index]' est√° com poucas chaves (underflow).
 * 'node->children[index - 1]' (o irm√£o) tem chaves sobrando.
 *
 * @param node O n√≥ PAI de ambos os filhos.
 * @param index O √≠ndice do n√≥ "pobre" (que precisa de uma chave).
 */

template <typename T>
void BPlusTree<T>::borrowFromPrev(Node* node, int index)
{
    // O n√≥ "pobre" (que precisa da chave)
    Node* child = node->children[index];
    // O n√≥ "rico" (o irm√£o da esquerda, que vai doar a chave)
    Node* sibling = node->children[index - 1];

    // --- A Rota√ß√£o de Chaves üîÑ ---

    // [Sua Nota] Passo 1: O filho "pobre" ('child') pega a chave
    // "separadora" que est√° no PAI ('node') e a coloca
    // como sua *primeira* chave.
    child->keys.insert(child->keys.begin(),
                       node->keys[index - 1]);

    // [Sua Nota] Passo 2: O PAI ('node') pega a *√∫ltima* chave
    // do irm√£o "rico" ('sibling') para preencher o "buraco".
    node->keys[index - 1] = sibling->keys.back();

    // [Sua Nota] Passo 3: O irm√£o "rico" ('sibling') remove a
    // √∫ltima chave (que ele acabou de doar para o pai).
    sibling->keys.pop_back();

    // [Sua Nota] Se n√£o forem folhas (forem n√≥s internos),
    // temos que rotacionar os *ponteiros de filhos* tamb√©m!
    if (!child->isLeaf) {
        // [Sua Nota] O 'child' "pobre" adota o *√∫ltimo* filho
        // do 'sibling' "rico".
        child->children.insert(child->children.begin(),
                               sibling->children.back());
        // [Sua Nota] O 'sibling' "rico" remove o ponteiro do filho
        // que ele acabou de doar.
        sibling->children.pop_back();
    }
}